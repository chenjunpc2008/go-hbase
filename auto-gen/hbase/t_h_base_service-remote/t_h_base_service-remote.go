// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package main

import (
    "context"
    "flag"
    "fmt"
    thrift "github.com/apache/thrift/lib/go/thrift"
    "math"
    "net"
    "net/url"
    "os"
    "strconv"
    "strings"

    "github.com/chenjunpc2008/go-hbase/auto-gen/hbase"
)

var _ = hbase.GoUnusedProtection__

func Usage() {
    fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
    flag.PrintDefaults()
    fmt.Fprintln(os.Stderr, "\nFunctions:")
    fmt.Fprintln(os.Stderr, "  bool exists(string table, TGet tget)")
    fmt.Fprintln(os.Stderr, "   existsAll(string table,  tgets)")
    fmt.Fprintln(os.Stderr, "  TResult get(string table, TGet tget)")
    fmt.Fprintln(os.Stderr, "   getMultiple(string table,  tgets)")
    fmt.Fprintln(os.Stderr, "  void put(string table, TPut tput)")
    fmt.Fprintln(os.Stderr, "  bool checkAndPut(string table, string row, string family, string qualifier, string value, TPut tput)")
    fmt.Fprintln(os.Stderr, "  void putMultiple(string table,  tputs)")
    fmt.Fprintln(os.Stderr, "  void deleteSingle(string table, TDelete tdelete)")
    fmt.Fprintln(os.Stderr, "   deleteMultiple(string table,  tdeletes)")
    fmt.Fprintln(os.Stderr, "  bool checkAndDelete(string table, string row, string family, string qualifier, string value, TDelete tdelete)")
    fmt.Fprintln(os.Stderr, "  TResult increment(string table, TIncrement tincrement)")
    fmt.Fprintln(os.Stderr, "  TResult append(string table, TAppend tappend)")
    fmt.Fprintln(os.Stderr, "  i32 openScanner(string table, TScan tscan)")
    fmt.Fprintln(os.Stderr, "   getScannerRows(i32 scannerId, i32 numRows)")
    fmt.Fprintln(os.Stderr, "  void closeScanner(i32 scannerId)")
    fmt.Fprintln(os.Stderr, "  void mutateRow(string table, TRowMutations trowMutations)")
    fmt.Fprintln(os.Stderr, "   getScannerResults(string table, TScan tscan, i32 numRows)")
    fmt.Fprintln(os.Stderr, "  THRegionLocation getRegionLocation(string table, string row, bool reload)")
    fmt.Fprintln(os.Stderr, "   getAllRegionLocations(string table)")
    fmt.Fprintln(os.Stderr, "  bool checkAndMutate(string table, string row, string family, string qualifier, TCompareOp compareOp, string value, TRowMutations rowMutations)")
    fmt.Fprintln(os.Stderr, "  TTableDescriptor getTableDescriptor(TTableName table)")
    fmt.Fprintln(os.Stderr, "   getTableDescriptors( tables)")
    fmt.Fprintln(os.Stderr, "  bool tableExists(TTableName tableName)")
    fmt.Fprintln(os.Stderr, "   getTableDescriptorsByPattern(string regex, bool includeSysTables)")
    fmt.Fprintln(os.Stderr, "   getTableDescriptorsByNamespace(string name)")
    fmt.Fprintln(os.Stderr, "   getTableNamesByPattern(string regex, bool includeSysTables)")
    fmt.Fprintln(os.Stderr, "   getTableNamesByNamespace(string name)")
    fmt.Fprintln(os.Stderr, "  void createTable(TTableDescriptor desc,  splitKeys)")
    fmt.Fprintln(os.Stderr, "  void deleteTable(TTableName tableName)")
    fmt.Fprintln(os.Stderr, "  void truncateTable(TTableName tableName, bool preserveSplits)")
    fmt.Fprintln(os.Stderr, "  void enableTable(TTableName tableName)")
    fmt.Fprintln(os.Stderr, "  void disableTable(TTableName tableName)")
    fmt.Fprintln(os.Stderr, "  bool isTableEnabled(TTableName tableName)")
    fmt.Fprintln(os.Stderr, "  bool isTableDisabled(TTableName tableName)")
    fmt.Fprintln(os.Stderr, "  bool isTableAvailable(TTableName tableName)")
    fmt.Fprintln(os.Stderr, "  bool isTableAvailableWithSplit(TTableName tableName,  splitKeys)")
    fmt.Fprintln(os.Stderr, "  void addColumnFamily(TTableName tableName, TColumnFamilyDescriptor column)")
    fmt.Fprintln(os.Stderr, "  void deleteColumnFamily(TTableName tableName, string column)")
    fmt.Fprintln(os.Stderr, "  void modifyColumnFamily(TTableName tableName, TColumnFamilyDescriptor column)")
    fmt.Fprintln(os.Stderr, "  void modifyTable(TTableDescriptor desc)")
    fmt.Fprintln(os.Stderr, "  void createNamespace(TNamespaceDescriptor namespaceDesc)")
    fmt.Fprintln(os.Stderr, "  void modifyNamespace(TNamespaceDescriptor namespaceDesc)")
    fmt.Fprintln(os.Stderr, "  void deleteNamespace(string name)")
    fmt.Fprintln(os.Stderr, "  TNamespaceDescriptor getNamespaceDescriptor(string name)")
    fmt.Fprintln(os.Stderr, "   listNamespaceDescriptors()")
    fmt.Fprintln(os.Stderr, "   listNamespaces()")
    fmt.Fprintln(os.Stderr, "  TThriftServerType getThriftServerType()")
    fmt.Fprintln(os.Stderr, "   getSlowLogResponses( serverNames, TLogQueryFilter logQueryFilter)")
    fmt.Fprintln(os.Stderr, "   clearSlowLogResponses( serverNames)")
    fmt.Fprintln(os.Stderr, "  string getClusterId()")
    fmt.Fprintln(os.Stderr)
    os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
    var m map[string]string = h
    return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
    parts := strings.Split(value, ": ")
    if len(parts) != 2 {
        return fmt.Errorf("header should be of format 'Key: Value'")
    }
    h[parts[0]] = parts[1]
    return nil
}

func main() {
    flag.Usage = Usage
    var host string
    var port int
    var protocol string
    var urlString string
    var framed bool
    var useHttp bool
    headers := make(httpHeaders)
    var parsedUrl *url.URL
    var trans thrift.TTransport
    _ = strconv.Atoi
    _ = math.Abs
    flag.Usage = Usage
    flag.StringVar(&host, "h", "localhost", "Specify host and port")
    flag.IntVar(&port, "p", 9090, "Specify port")
    flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
    flag.StringVar(&urlString, "u", "", "Specify the url")
    flag.BoolVar(&framed, "framed", false, "Use framed transport")
    flag.BoolVar(&useHttp, "http", false, "Use http")
    flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
    flag.Parse()

    if len(urlString) > 0 {
        var err error
        parsedUrl, err = url.Parse(urlString)
        if err != nil {
            fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
            flag.Usage()
        }
        host = parsedUrl.Host
        useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
    } else if useHttp {
        _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
        if err != nil {
            fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
            flag.Usage()
        }
    }

    cmd := flag.Arg(0)
    var err error
    var cfg *thrift.TConfiguration = nil
    if useHttp {
        trans, err = thrift.NewTHttpClient(parsedUrl.String())
        if len(headers) > 0 {
            httptrans := trans.(*thrift.THttpClient)
            for key, value := range headers {
                httptrans.SetHeader(key, value)
            }
        }
    } else {
        portStr := fmt.Sprint(port)
        if strings.Contains(host, ":") {
            host, portStr, err = net.SplitHostPort(host)
            if err != nil {
                fmt.Fprintln(os.Stderr, "error with host:", err)
                os.Exit(1)
            }
        }
        trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
        if err != nil {
            fmt.Fprintln(os.Stderr, "error resolving address:", err)
            os.Exit(1)
        }
        if framed {
            trans = thrift.NewTFramedTransportConf(trans, cfg)
        }
    }
    if err != nil {
        fmt.Fprintln(os.Stderr, "Error creating transport", err)
        os.Exit(1)
    }
    defer trans.Close()
    var protocolFactory thrift.TProtocolFactory
    switch protocol {
    case "compact":
        protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
        break
    case "simplejson":
        protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
        break
    case "json":
        protocolFactory = thrift.NewTJSONProtocolFactory()
        break
    case "binary", "":
        protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
        break
    default:
        fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
        Usage()
        os.Exit(1)
    }
    iprot := protocolFactory.GetProtocol(trans)
    oprot := protocolFactory.GetProtocol(trans)
    client := hbase.NewTHBaseServiceClient(thrift.NewTStandardClient(iprot, oprot))
    if err := trans.Open(); err != nil {
        fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
        os.Exit(1)
    }

    switch cmd {
    case "exists":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "Exists requires 2 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg336 := flag.Arg(2)
        mbTrans337 := thrift.NewTMemoryBufferLen(len(arg336))
        defer mbTrans337.Close()
        _, err338 := mbTrans337.WriteString(arg336)
        if err338 != nil {
            Usage()
            return
        }
        factory339 := thrift.NewTJSONProtocolFactory()
        jsProt340 := factory339.GetProtocol(mbTrans337)
        argvalue1 := hbase.NewTGet()
        err341 := argvalue1.Read(context.Background(), jsProt340)
        if err341 != nil {
            Usage()
            return
        }
        value1 := argvalue1
        fmt.Print(client.Exists(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "existsAll":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "ExistsAll requires 2 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg343 := flag.Arg(2)
        mbTrans344 := thrift.NewTMemoryBufferLen(len(arg343))
        defer mbTrans344.Close()
        _, err345 := mbTrans344.WriteString(arg343)
        if err345 != nil {
            Usage()
            return
        }
        factory346 := thrift.NewTJSONProtocolFactory()
        jsProt347 := factory346.GetProtocol(mbTrans344)
        containerStruct1 := hbase.NewTHBaseServiceExistsAllArgs()
        err348 := containerStruct1.ReadField2(context.Background(), jsProt347)
        if err348 != nil {
            Usage()
            return
        }
        argvalue1 := containerStruct1.Tgets
        value1 := argvalue1
        fmt.Print(client.ExistsAll(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "get":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "Get requires 2 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg350 := flag.Arg(2)
        mbTrans351 := thrift.NewTMemoryBufferLen(len(arg350))
        defer mbTrans351.Close()
        _, err352 := mbTrans351.WriteString(arg350)
        if err352 != nil {
            Usage()
            return
        }
        factory353 := thrift.NewTJSONProtocolFactory()
        jsProt354 := factory353.GetProtocol(mbTrans351)
        argvalue1 := hbase.NewTGet()
        err355 := argvalue1.Read(context.Background(), jsProt354)
        if err355 != nil {
            Usage()
            return
        }
        value1 := argvalue1
        fmt.Print(client.Get(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "getMultiple":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "GetMultiple requires 2 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg357 := flag.Arg(2)
        mbTrans358 := thrift.NewTMemoryBufferLen(len(arg357))
        defer mbTrans358.Close()
        _, err359 := mbTrans358.WriteString(arg357)
        if err359 != nil {
            Usage()
            return
        }
        factory360 := thrift.NewTJSONProtocolFactory()
        jsProt361 := factory360.GetProtocol(mbTrans358)
        containerStruct1 := hbase.NewTHBaseServiceGetMultipleArgs()
        err362 := containerStruct1.ReadField2(context.Background(), jsProt361)
        if err362 != nil {
            Usage()
            return
        }
        argvalue1 := containerStruct1.Tgets
        value1 := argvalue1
        fmt.Print(client.GetMultiple(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "put":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "Put requires 2 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg364 := flag.Arg(2)
        mbTrans365 := thrift.NewTMemoryBufferLen(len(arg364))
        defer mbTrans365.Close()
        _, err366 := mbTrans365.WriteString(arg364)
        if err366 != nil {
            Usage()
            return
        }
        factory367 := thrift.NewTJSONProtocolFactory()
        jsProt368 := factory367.GetProtocol(mbTrans365)
        argvalue1 := hbase.NewTPut()
        err369 := argvalue1.Read(context.Background(), jsProt368)
        if err369 != nil {
            Usage()
            return
        }
        value1 := argvalue1
        fmt.Print(client.Put(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "checkAndPut":
        if flag.NArg()-1 != 6 {
            fmt.Fprintln(os.Stderr, "CheckAndPut requires 6 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        argvalue1 := []byte(flag.Arg(2))
        value1 := argvalue1
        argvalue2 := []byte(flag.Arg(3))
        value2 := argvalue2
        argvalue3 := []byte(flag.Arg(4))
        value3 := argvalue3
        argvalue4 := []byte(flag.Arg(5))
        value4 := argvalue4
        arg375 := flag.Arg(6)
        mbTrans376 := thrift.NewTMemoryBufferLen(len(arg375))
        defer mbTrans376.Close()
        _, err377 := mbTrans376.WriteString(arg375)
        if err377 != nil {
            Usage()
            return
        }
        factory378 := thrift.NewTJSONProtocolFactory()
        jsProt379 := factory378.GetProtocol(mbTrans376)
        argvalue5 := hbase.NewTPut()
        err380 := argvalue5.Read(context.Background(), jsProt379)
        if err380 != nil {
            Usage()
            return
        }
        value5 := argvalue5
        fmt.Print(client.CheckAndPut(context.Background(), value0, value1, value2, value3, value4, value5))
        fmt.Print("\n")
        break
    case "putMultiple":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "PutMultiple requires 2 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg382 := flag.Arg(2)
        mbTrans383 := thrift.NewTMemoryBufferLen(len(arg382))
        defer mbTrans383.Close()
        _, err384 := mbTrans383.WriteString(arg382)
        if err384 != nil {
            Usage()
            return
        }
        factory385 := thrift.NewTJSONProtocolFactory()
        jsProt386 := factory385.GetProtocol(mbTrans383)
        containerStruct1 := hbase.NewTHBaseServicePutMultipleArgs()
        err387 := containerStruct1.ReadField2(context.Background(), jsProt386)
        if err387 != nil {
            Usage()
            return
        }
        argvalue1 := containerStruct1.Tputs
        value1 := argvalue1
        fmt.Print(client.PutMultiple(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "deleteSingle":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "DeleteSingle requires 2 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg389 := flag.Arg(2)
        mbTrans390 := thrift.NewTMemoryBufferLen(len(arg389))
        defer mbTrans390.Close()
        _, err391 := mbTrans390.WriteString(arg389)
        if err391 != nil {
            Usage()
            return
        }
        factory392 := thrift.NewTJSONProtocolFactory()
        jsProt393 := factory392.GetProtocol(mbTrans390)
        argvalue1 := hbase.NewTDelete()
        err394 := argvalue1.Read(context.Background(), jsProt393)
        if err394 != nil {
            Usage()
            return
        }
        value1 := argvalue1
        fmt.Print(client.DeleteSingle(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "deleteMultiple":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "DeleteMultiple requires 2 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg396 := flag.Arg(2)
        mbTrans397 := thrift.NewTMemoryBufferLen(len(arg396))
        defer mbTrans397.Close()
        _, err398 := mbTrans397.WriteString(arg396)
        if err398 != nil {
            Usage()
            return
        }
        factory399 := thrift.NewTJSONProtocolFactory()
        jsProt400 := factory399.GetProtocol(mbTrans397)
        containerStruct1 := hbase.NewTHBaseServiceDeleteMultipleArgs()
        err401 := containerStruct1.ReadField2(context.Background(), jsProt400)
        if err401 != nil {
            Usage()
            return
        }
        argvalue1 := containerStruct1.Tdeletes
        value1 := argvalue1
        fmt.Print(client.DeleteMultiple(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "checkAndDelete":
        if flag.NArg()-1 != 6 {
            fmt.Fprintln(os.Stderr, "CheckAndDelete requires 6 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        argvalue1 := []byte(flag.Arg(2))
        value1 := argvalue1
        argvalue2 := []byte(flag.Arg(3))
        value2 := argvalue2
        argvalue3 := []byte(flag.Arg(4))
        value3 := argvalue3
        argvalue4 := []byte(flag.Arg(5))
        value4 := argvalue4
        arg407 := flag.Arg(6)
        mbTrans408 := thrift.NewTMemoryBufferLen(len(arg407))
        defer mbTrans408.Close()
        _, err409 := mbTrans408.WriteString(arg407)
        if err409 != nil {
            Usage()
            return
        }
        factory410 := thrift.NewTJSONProtocolFactory()
        jsProt411 := factory410.GetProtocol(mbTrans408)
        argvalue5 := hbase.NewTDelete()
        err412 := argvalue5.Read(context.Background(), jsProt411)
        if err412 != nil {
            Usage()
            return
        }
        value5 := argvalue5
        fmt.Print(client.CheckAndDelete(context.Background(), value0, value1, value2, value3, value4, value5))
        fmt.Print("\n")
        break
    case "increment":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "Increment requires 2 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg414 := flag.Arg(2)
        mbTrans415 := thrift.NewTMemoryBufferLen(len(arg414))
        defer mbTrans415.Close()
        _, err416 := mbTrans415.WriteString(arg414)
        if err416 != nil {
            Usage()
            return
        }
        factory417 := thrift.NewTJSONProtocolFactory()
        jsProt418 := factory417.GetProtocol(mbTrans415)
        argvalue1 := hbase.NewTIncrement()
        err419 := argvalue1.Read(context.Background(), jsProt418)
        if err419 != nil {
            Usage()
            return
        }
        value1 := argvalue1
        fmt.Print(client.Increment(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "append":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "Append requires 2 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg421 := flag.Arg(2)
        mbTrans422 := thrift.NewTMemoryBufferLen(len(arg421))
        defer mbTrans422.Close()
        _, err423 := mbTrans422.WriteString(arg421)
        if err423 != nil {
            Usage()
            return
        }
        factory424 := thrift.NewTJSONProtocolFactory()
        jsProt425 := factory424.GetProtocol(mbTrans422)
        argvalue1 := hbase.NewTAppend()
        err426 := argvalue1.Read(context.Background(), jsProt425)
        if err426 != nil {
            Usage()
            return
        }
        value1 := argvalue1
        fmt.Print(client.Append(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "openScanner":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "OpenScanner requires 2 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg428 := flag.Arg(2)
        mbTrans429 := thrift.NewTMemoryBufferLen(len(arg428))
        defer mbTrans429.Close()
        _, err430 := mbTrans429.WriteString(arg428)
        if err430 != nil {
            Usage()
            return
        }
        factory431 := thrift.NewTJSONProtocolFactory()
        jsProt432 := factory431.GetProtocol(mbTrans429)
        argvalue1 := hbase.NewTScan()
        err433 := argvalue1.Read(context.Background(), jsProt432)
        if err433 != nil {
            Usage()
            return
        }
        value1 := argvalue1
        fmt.Print(client.OpenScanner(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "getScannerRows":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "GetScannerRows requires 2 args")
            flag.Usage()
        }
        tmp0, err434 := (strconv.Atoi(flag.Arg(1)))
        if err434 != nil {
            Usage()
            return
        }
        argvalue0 := int32(tmp0)
        value0 := argvalue0
        tmp1, err435 := (strconv.Atoi(flag.Arg(2)))
        if err435 != nil {
            Usage()
            return
        }
        argvalue1 := int32(tmp1)
        value1 := argvalue1
        fmt.Print(client.GetScannerRows(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "closeScanner":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "CloseScanner requires 1 args")
            flag.Usage()
        }
        tmp0, err436 := (strconv.Atoi(flag.Arg(1)))
        if err436 != nil {
            Usage()
            return
        }
        argvalue0 := int32(tmp0)
        value0 := argvalue0
        fmt.Print(client.CloseScanner(context.Background(), value0))
        fmt.Print("\n")
        break
    case "mutateRow":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "MutateRow requires 2 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg438 := flag.Arg(2)
        mbTrans439 := thrift.NewTMemoryBufferLen(len(arg438))
        defer mbTrans439.Close()
        _, err440 := mbTrans439.WriteString(arg438)
        if err440 != nil {
            Usage()
            return
        }
        factory441 := thrift.NewTJSONProtocolFactory()
        jsProt442 := factory441.GetProtocol(mbTrans439)
        argvalue1 := hbase.NewTRowMutations()
        err443 := argvalue1.Read(context.Background(), jsProt442)
        if err443 != nil {
            Usage()
            return
        }
        value1 := argvalue1
        fmt.Print(client.MutateRow(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "getScannerResults":
        if flag.NArg()-1 != 3 {
            fmt.Fprintln(os.Stderr, "GetScannerResults requires 3 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        arg445 := flag.Arg(2)
        mbTrans446 := thrift.NewTMemoryBufferLen(len(arg445))
        defer mbTrans446.Close()
        _, err447 := mbTrans446.WriteString(arg445)
        if err447 != nil {
            Usage()
            return
        }
        factory448 := thrift.NewTJSONProtocolFactory()
        jsProt449 := factory448.GetProtocol(mbTrans446)
        argvalue1 := hbase.NewTScan()
        err450 := argvalue1.Read(context.Background(), jsProt449)
        if err450 != nil {
            Usage()
            return
        }
        value1 := argvalue1
        tmp2, err451 := (strconv.Atoi(flag.Arg(3)))
        if err451 != nil {
            Usage()
            return
        }
        argvalue2 := int32(tmp2)
        value2 := argvalue2
        fmt.Print(client.GetScannerResults(context.Background(), value0, value1, value2))
        fmt.Print("\n")
        break
    case "getRegionLocation":
        if flag.NArg()-1 != 3 {
            fmt.Fprintln(os.Stderr, "GetRegionLocation requires 3 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        argvalue1 := []byte(flag.Arg(2))
        value1 := argvalue1
        argvalue2 := flag.Arg(3) == "true"
        value2 := argvalue2
        fmt.Print(client.GetRegionLocation(context.Background(), value0, value1, value2))
        fmt.Print("\n")
        break
    case "getAllRegionLocations":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "GetAllRegionLocations requires 1 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        fmt.Print(client.GetAllRegionLocations(context.Background(), value0))
        fmt.Print("\n")
        break
    case "checkAndMutate":
        if flag.NArg()-1 != 7 {
            fmt.Fprintln(os.Stderr, "CheckAndMutate requires 7 args")
            flag.Usage()
        }
        argvalue0 := []byte(flag.Arg(1))
        value0 := argvalue0
        argvalue1 := []byte(flag.Arg(2))
        value1 := argvalue1
        argvalue2 := []byte(flag.Arg(3))
        value2 := argvalue2
        argvalue3 := []byte(flag.Arg(4))
        value3 := argvalue3
        tmp4, err := (strconv.Atoi(flag.Arg(5)))
        if err != nil {
            Usage()
            return
        }
        argvalue4 := hbase.TCompareOp(tmp4)
        value4 := argvalue4
        argvalue5 := []byte(flag.Arg(6))
        value5 := argvalue5
        arg461 := flag.Arg(7)
        mbTrans462 := thrift.NewTMemoryBufferLen(len(arg461))
        defer mbTrans462.Close()
        _, err463 := mbTrans462.WriteString(arg461)
        if err463 != nil {
            Usage()
            return
        }
        factory464 := thrift.NewTJSONProtocolFactory()
        jsProt465 := factory464.GetProtocol(mbTrans462)
        argvalue6 := hbase.NewTRowMutations()
        err466 := argvalue6.Read(context.Background(), jsProt465)
        if err466 != nil {
            Usage()
            return
        }
        value6 := argvalue6
        fmt.Print(client.CheckAndMutate(context.Background(), value0, value1, value2, value3, value4, value5, value6))
        fmt.Print("\n")
        break
    case "getTableDescriptor":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "GetTableDescriptor requires 1 args")
            flag.Usage()
        }
        arg467 := flag.Arg(1)
        mbTrans468 := thrift.NewTMemoryBufferLen(len(arg467))
        defer mbTrans468.Close()
        _, err469 := mbTrans468.WriteString(arg467)
        if err469 != nil {
            Usage()
            return
        }
        factory470 := thrift.NewTJSONProtocolFactory()
        jsProt471 := factory470.GetProtocol(mbTrans468)
        argvalue0 := hbase.NewTTableName()
        err472 := argvalue0.Read(context.Background(), jsProt471)
        if err472 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        fmt.Print(client.GetTableDescriptor(context.Background(), value0))
        fmt.Print("\n")
        break
    case "getTableDescriptors":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "GetTableDescriptors requires 1 args")
            flag.Usage()
        }
        arg473 := flag.Arg(1)
        mbTrans474 := thrift.NewTMemoryBufferLen(len(arg473))
        defer mbTrans474.Close()
        _, err475 := mbTrans474.WriteString(arg473)
        if err475 != nil {
            Usage()
            return
        }
        factory476 := thrift.NewTJSONProtocolFactory()
        jsProt477 := factory476.GetProtocol(mbTrans474)
        containerStruct0 := hbase.NewTHBaseServiceGetTableDescriptorsArgs()
        err478 := containerStruct0.ReadField1(context.Background(), jsProt477)
        if err478 != nil {
            Usage()
            return
        }
        argvalue0 := containerStruct0.Tables
        value0 := argvalue0
        fmt.Print(client.GetTableDescriptors(context.Background(), value0))
        fmt.Print("\n")
        break
    case "tableExists":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "TableExists requires 1 args")
            flag.Usage()
        }
        arg479 := flag.Arg(1)
        mbTrans480 := thrift.NewTMemoryBufferLen(len(arg479))
        defer mbTrans480.Close()
        _, err481 := mbTrans480.WriteString(arg479)
        if err481 != nil {
            Usage()
            return
        }
        factory482 := thrift.NewTJSONProtocolFactory()
        jsProt483 := factory482.GetProtocol(mbTrans480)
        argvalue0 := hbase.NewTTableName()
        err484 := argvalue0.Read(context.Background(), jsProt483)
        if err484 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        fmt.Print(client.TableExists(context.Background(), value0))
        fmt.Print("\n")
        break
    case "getTableDescriptorsByPattern":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "GetTableDescriptorsByPattern requires 2 args")
            flag.Usage()
        }
        argvalue0 := flag.Arg(1)
        value0 := argvalue0
        argvalue1 := flag.Arg(2) == "true"
        value1 := argvalue1
        fmt.Print(client.GetTableDescriptorsByPattern(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "getTableDescriptorsByNamespace":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "GetTableDescriptorsByNamespace requires 1 args")
            flag.Usage()
        }
        argvalue0 := flag.Arg(1)
        value0 := argvalue0
        fmt.Print(client.GetTableDescriptorsByNamespace(context.Background(), value0))
        fmt.Print("\n")
        break
    case "getTableNamesByPattern":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "GetTableNamesByPattern requires 2 args")
            flag.Usage()
        }
        argvalue0 := flag.Arg(1)
        value0 := argvalue0
        argvalue1 := flag.Arg(2) == "true"
        value1 := argvalue1
        fmt.Print(client.GetTableNamesByPattern(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "getTableNamesByNamespace":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "GetTableNamesByNamespace requires 1 args")
            flag.Usage()
        }
        argvalue0 := flag.Arg(1)
        value0 := argvalue0
        fmt.Print(client.GetTableNamesByNamespace(context.Background(), value0))
        fmt.Print("\n")
        break
    case "createTable":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "CreateTable requires 2 args")
            flag.Usage()
        }
        arg491 := flag.Arg(1)
        mbTrans492 := thrift.NewTMemoryBufferLen(len(arg491))
        defer mbTrans492.Close()
        _, err493 := mbTrans492.WriteString(arg491)
        if err493 != nil {
            Usage()
            return
        }
        factory494 := thrift.NewTJSONProtocolFactory()
        jsProt495 := factory494.GetProtocol(mbTrans492)
        argvalue0 := hbase.NewTTableDescriptor()
        err496 := argvalue0.Read(context.Background(), jsProt495)
        if err496 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        arg497 := flag.Arg(2)
        mbTrans498 := thrift.NewTMemoryBufferLen(len(arg497))
        defer mbTrans498.Close()
        _, err499 := mbTrans498.WriteString(arg497)
        if err499 != nil {
            Usage()
            return
        }
        factory500 := thrift.NewTJSONProtocolFactory()
        jsProt501 := factory500.GetProtocol(mbTrans498)
        containerStruct1 := hbase.NewTHBaseServiceCreateTableArgs()
        err502 := containerStruct1.ReadField2(context.Background(), jsProt501)
        if err502 != nil {
            Usage()
            return
        }
        argvalue1 := containerStruct1.SplitKeys
        value1 := argvalue1
        fmt.Print(client.CreateTable(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "deleteTable":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "DeleteTable requires 1 args")
            flag.Usage()
        }
        arg503 := flag.Arg(1)
        mbTrans504 := thrift.NewTMemoryBufferLen(len(arg503))
        defer mbTrans504.Close()
        _, err505 := mbTrans504.WriteString(arg503)
        if err505 != nil {
            Usage()
            return
        }
        factory506 := thrift.NewTJSONProtocolFactory()
        jsProt507 := factory506.GetProtocol(mbTrans504)
        argvalue0 := hbase.NewTTableName()
        err508 := argvalue0.Read(context.Background(), jsProt507)
        if err508 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        fmt.Print(client.DeleteTable(context.Background(), value0))
        fmt.Print("\n")
        break
    case "truncateTable":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "TruncateTable requires 2 args")
            flag.Usage()
        }
        arg509 := flag.Arg(1)
        mbTrans510 := thrift.NewTMemoryBufferLen(len(arg509))
        defer mbTrans510.Close()
        _, err511 := mbTrans510.WriteString(arg509)
        if err511 != nil {
            Usage()
            return
        }
        factory512 := thrift.NewTJSONProtocolFactory()
        jsProt513 := factory512.GetProtocol(mbTrans510)
        argvalue0 := hbase.NewTTableName()
        err514 := argvalue0.Read(context.Background(), jsProt513)
        if err514 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        argvalue1 := flag.Arg(2) == "true"
        value1 := argvalue1
        fmt.Print(client.TruncateTable(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "enableTable":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "EnableTable requires 1 args")
            flag.Usage()
        }
        arg516 := flag.Arg(1)
        mbTrans517 := thrift.NewTMemoryBufferLen(len(arg516))
        defer mbTrans517.Close()
        _, err518 := mbTrans517.WriteString(arg516)
        if err518 != nil {
            Usage()
            return
        }
        factory519 := thrift.NewTJSONProtocolFactory()
        jsProt520 := factory519.GetProtocol(mbTrans517)
        argvalue0 := hbase.NewTTableName()
        err521 := argvalue0.Read(context.Background(), jsProt520)
        if err521 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        fmt.Print(client.EnableTable(context.Background(), value0))
        fmt.Print("\n")
        break
    case "disableTable":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "DisableTable requires 1 args")
            flag.Usage()
        }
        arg522 := flag.Arg(1)
        mbTrans523 := thrift.NewTMemoryBufferLen(len(arg522))
        defer mbTrans523.Close()
        _, err524 := mbTrans523.WriteString(arg522)
        if err524 != nil {
            Usage()
            return
        }
        factory525 := thrift.NewTJSONProtocolFactory()
        jsProt526 := factory525.GetProtocol(mbTrans523)
        argvalue0 := hbase.NewTTableName()
        err527 := argvalue0.Read(context.Background(), jsProt526)
        if err527 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        fmt.Print(client.DisableTable(context.Background(), value0))
        fmt.Print("\n")
        break
    case "isTableEnabled":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "IsTableEnabled requires 1 args")
            flag.Usage()
        }
        arg528 := flag.Arg(1)
        mbTrans529 := thrift.NewTMemoryBufferLen(len(arg528))
        defer mbTrans529.Close()
        _, err530 := mbTrans529.WriteString(arg528)
        if err530 != nil {
            Usage()
            return
        }
        factory531 := thrift.NewTJSONProtocolFactory()
        jsProt532 := factory531.GetProtocol(mbTrans529)
        argvalue0 := hbase.NewTTableName()
        err533 := argvalue0.Read(context.Background(), jsProt532)
        if err533 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        fmt.Print(client.IsTableEnabled(context.Background(), value0))
        fmt.Print("\n")
        break
    case "isTableDisabled":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "IsTableDisabled requires 1 args")
            flag.Usage()
        }
        arg534 := flag.Arg(1)
        mbTrans535 := thrift.NewTMemoryBufferLen(len(arg534))
        defer mbTrans535.Close()
        _, err536 := mbTrans535.WriteString(arg534)
        if err536 != nil {
            Usage()
            return
        }
        factory537 := thrift.NewTJSONProtocolFactory()
        jsProt538 := factory537.GetProtocol(mbTrans535)
        argvalue0 := hbase.NewTTableName()
        err539 := argvalue0.Read(context.Background(), jsProt538)
        if err539 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        fmt.Print(client.IsTableDisabled(context.Background(), value0))
        fmt.Print("\n")
        break
    case "isTableAvailable":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "IsTableAvailable requires 1 args")
            flag.Usage()
        }
        arg540 := flag.Arg(1)
        mbTrans541 := thrift.NewTMemoryBufferLen(len(arg540))
        defer mbTrans541.Close()
        _, err542 := mbTrans541.WriteString(arg540)
        if err542 != nil {
            Usage()
            return
        }
        factory543 := thrift.NewTJSONProtocolFactory()
        jsProt544 := factory543.GetProtocol(mbTrans541)
        argvalue0 := hbase.NewTTableName()
        err545 := argvalue0.Read(context.Background(), jsProt544)
        if err545 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        fmt.Print(client.IsTableAvailable(context.Background(), value0))
        fmt.Print("\n")
        break
    case "isTableAvailableWithSplit":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "IsTableAvailableWithSplit requires 2 args")
            flag.Usage()
        }
        arg546 := flag.Arg(1)
        mbTrans547 := thrift.NewTMemoryBufferLen(len(arg546))
        defer mbTrans547.Close()
        _, err548 := mbTrans547.WriteString(arg546)
        if err548 != nil {
            Usage()
            return
        }
        factory549 := thrift.NewTJSONProtocolFactory()
        jsProt550 := factory549.GetProtocol(mbTrans547)
        argvalue0 := hbase.NewTTableName()
        err551 := argvalue0.Read(context.Background(), jsProt550)
        if err551 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        arg552 := flag.Arg(2)
        mbTrans553 := thrift.NewTMemoryBufferLen(len(arg552))
        defer mbTrans553.Close()
        _, err554 := mbTrans553.WriteString(arg552)
        if err554 != nil {
            Usage()
            return
        }
        factory555 := thrift.NewTJSONProtocolFactory()
        jsProt556 := factory555.GetProtocol(mbTrans553)
        containerStruct1 := hbase.NewTHBaseServiceIsTableAvailableWithSplitArgs()
        err557 := containerStruct1.ReadField2(context.Background(), jsProt556)
        if err557 != nil {
            Usage()
            return
        }
        argvalue1 := containerStruct1.SplitKeys
        value1 := argvalue1
        fmt.Print(client.IsTableAvailableWithSplit(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "addColumnFamily":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "AddColumnFamily requires 2 args")
            flag.Usage()
        }
        arg558 := flag.Arg(1)
        mbTrans559 := thrift.NewTMemoryBufferLen(len(arg558))
        defer mbTrans559.Close()
        _, err560 := mbTrans559.WriteString(arg558)
        if err560 != nil {
            Usage()
            return
        }
        factory561 := thrift.NewTJSONProtocolFactory()
        jsProt562 := factory561.GetProtocol(mbTrans559)
        argvalue0 := hbase.NewTTableName()
        err563 := argvalue0.Read(context.Background(), jsProt562)
        if err563 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        arg564 := flag.Arg(2)
        mbTrans565 := thrift.NewTMemoryBufferLen(len(arg564))
        defer mbTrans565.Close()
        _, err566 := mbTrans565.WriteString(arg564)
        if err566 != nil {
            Usage()
            return
        }
        factory567 := thrift.NewTJSONProtocolFactory()
        jsProt568 := factory567.GetProtocol(mbTrans565)
        argvalue1 := hbase.NewTColumnFamilyDescriptor()
        err569 := argvalue1.Read(context.Background(), jsProt568)
        if err569 != nil {
            Usage()
            return
        }
        value1 := argvalue1
        fmt.Print(client.AddColumnFamily(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "deleteColumnFamily":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "DeleteColumnFamily requires 2 args")
            flag.Usage()
        }
        arg570 := flag.Arg(1)
        mbTrans571 := thrift.NewTMemoryBufferLen(len(arg570))
        defer mbTrans571.Close()
        _, err572 := mbTrans571.WriteString(arg570)
        if err572 != nil {
            Usage()
            return
        }
        factory573 := thrift.NewTJSONProtocolFactory()
        jsProt574 := factory573.GetProtocol(mbTrans571)
        argvalue0 := hbase.NewTTableName()
        err575 := argvalue0.Read(context.Background(), jsProt574)
        if err575 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        argvalue1 := []byte(flag.Arg(2))
        value1 := argvalue1
        fmt.Print(client.DeleteColumnFamily(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "modifyColumnFamily":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "ModifyColumnFamily requires 2 args")
            flag.Usage()
        }
        arg577 := flag.Arg(1)
        mbTrans578 := thrift.NewTMemoryBufferLen(len(arg577))
        defer mbTrans578.Close()
        _, err579 := mbTrans578.WriteString(arg577)
        if err579 != nil {
            Usage()
            return
        }
        factory580 := thrift.NewTJSONProtocolFactory()
        jsProt581 := factory580.GetProtocol(mbTrans578)
        argvalue0 := hbase.NewTTableName()
        err582 := argvalue0.Read(context.Background(), jsProt581)
        if err582 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        arg583 := flag.Arg(2)
        mbTrans584 := thrift.NewTMemoryBufferLen(len(arg583))
        defer mbTrans584.Close()
        _, err585 := mbTrans584.WriteString(arg583)
        if err585 != nil {
            Usage()
            return
        }
        factory586 := thrift.NewTJSONProtocolFactory()
        jsProt587 := factory586.GetProtocol(mbTrans584)
        argvalue1 := hbase.NewTColumnFamilyDescriptor()
        err588 := argvalue1.Read(context.Background(), jsProt587)
        if err588 != nil {
            Usage()
            return
        }
        value1 := argvalue1
        fmt.Print(client.ModifyColumnFamily(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "modifyTable":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "ModifyTable requires 1 args")
            flag.Usage()
        }
        arg589 := flag.Arg(1)
        mbTrans590 := thrift.NewTMemoryBufferLen(len(arg589))
        defer mbTrans590.Close()
        _, err591 := mbTrans590.WriteString(arg589)
        if err591 != nil {
            Usage()
            return
        }
        factory592 := thrift.NewTJSONProtocolFactory()
        jsProt593 := factory592.GetProtocol(mbTrans590)
        argvalue0 := hbase.NewTTableDescriptor()
        err594 := argvalue0.Read(context.Background(), jsProt593)
        if err594 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        fmt.Print(client.ModifyTable(context.Background(), value0))
        fmt.Print("\n")
        break
    case "createNamespace":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "CreateNamespace requires 1 args")
            flag.Usage()
        }
        arg595 := flag.Arg(1)
        mbTrans596 := thrift.NewTMemoryBufferLen(len(arg595))
        defer mbTrans596.Close()
        _, err597 := mbTrans596.WriteString(arg595)
        if err597 != nil {
            Usage()
            return
        }
        factory598 := thrift.NewTJSONProtocolFactory()
        jsProt599 := factory598.GetProtocol(mbTrans596)
        argvalue0 := hbase.NewTNamespaceDescriptor()
        err600 := argvalue0.Read(context.Background(), jsProt599)
        if err600 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        fmt.Print(client.CreateNamespace(context.Background(), value0))
        fmt.Print("\n")
        break
    case "modifyNamespace":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "ModifyNamespace requires 1 args")
            flag.Usage()
        }
        arg601 := flag.Arg(1)
        mbTrans602 := thrift.NewTMemoryBufferLen(len(arg601))
        defer mbTrans602.Close()
        _, err603 := mbTrans602.WriteString(arg601)
        if err603 != nil {
            Usage()
            return
        }
        factory604 := thrift.NewTJSONProtocolFactory()
        jsProt605 := factory604.GetProtocol(mbTrans602)
        argvalue0 := hbase.NewTNamespaceDescriptor()
        err606 := argvalue0.Read(context.Background(), jsProt605)
        if err606 != nil {
            Usage()
            return
        }
        value0 := argvalue0
        fmt.Print(client.ModifyNamespace(context.Background(), value0))
        fmt.Print("\n")
        break
    case "deleteNamespace":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "DeleteNamespace requires 1 args")
            flag.Usage()
        }
        argvalue0 := flag.Arg(1)
        value0 := argvalue0
        fmt.Print(client.DeleteNamespace(context.Background(), value0))
        fmt.Print("\n")
        break
    case "getNamespaceDescriptor":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "GetNamespaceDescriptor requires 1 args")
            flag.Usage()
        }
        argvalue0 := flag.Arg(1)
        value0 := argvalue0
        fmt.Print(client.GetNamespaceDescriptor(context.Background(), value0))
        fmt.Print("\n")
        break
    case "listNamespaceDescriptors":
        if flag.NArg()-1 != 0 {
            fmt.Fprintln(os.Stderr, "ListNamespaceDescriptors requires 0 args")
            flag.Usage()
        }
        fmt.Print(client.ListNamespaceDescriptors(context.Background()))
        fmt.Print("\n")
        break
    case "listNamespaces":
        if flag.NArg()-1 != 0 {
            fmt.Fprintln(os.Stderr, "ListNamespaces requires 0 args")
            flag.Usage()
        }
        fmt.Print(client.ListNamespaces(context.Background()))
        fmt.Print("\n")
        break
    case "getThriftServerType":
        if flag.NArg()-1 != 0 {
            fmt.Fprintln(os.Stderr, "GetThriftServerType requires 0 args")
            flag.Usage()
        }
        fmt.Print(client.GetThriftServerType(context.Background()))
        fmt.Print("\n")
        break
    case "getSlowLogResponses":
        if flag.NArg()-1 != 2 {
            fmt.Fprintln(os.Stderr, "GetSlowLogResponses requires 2 args")
            flag.Usage()
        }
        arg609 := flag.Arg(1)
        mbTrans610 := thrift.NewTMemoryBufferLen(len(arg609))
        defer mbTrans610.Close()
        _, err611 := mbTrans610.WriteString(arg609)
        if err611 != nil {
            Usage()
            return
        }
        factory612 := thrift.NewTJSONProtocolFactory()
        jsProt613 := factory612.GetProtocol(mbTrans610)
        containerStruct0 := hbase.NewTHBaseServiceGetSlowLogResponsesArgs()
        err614 := containerStruct0.ReadField1(context.Background(), jsProt613)
        if err614 != nil {
            Usage()
            return
        }
        argvalue0 := containerStruct0.ServerNames
        value0 := argvalue0
        arg615 := flag.Arg(2)
        mbTrans616 := thrift.NewTMemoryBufferLen(len(arg615))
        defer mbTrans616.Close()
        _, err617 := mbTrans616.WriteString(arg615)
        if err617 != nil {
            Usage()
            return
        }
        factory618 := thrift.NewTJSONProtocolFactory()
        jsProt619 := factory618.GetProtocol(mbTrans616)
        argvalue1 := hbase.NewTLogQueryFilter()
        err620 := argvalue1.Read(context.Background(), jsProt619)
        if err620 != nil {
            Usage()
            return
        }
        value1 := argvalue1
        fmt.Print(client.GetSlowLogResponses(context.Background(), value0, value1))
        fmt.Print("\n")
        break
    case "clearSlowLogResponses":
        if flag.NArg()-1 != 1 {
            fmt.Fprintln(os.Stderr, "ClearSlowLogResponses requires 1 args")
            flag.Usage()
        }
        arg621 := flag.Arg(1)
        mbTrans622 := thrift.NewTMemoryBufferLen(len(arg621))
        defer mbTrans622.Close()
        _, err623 := mbTrans622.WriteString(arg621)
        if err623 != nil {
            Usage()
            return
        }
        factory624 := thrift.NewTJSONProtocolFactory()
        jsProt625 := factory624.GetProtocol(mbTrans622)
        containerStruct0 := hbase.NewTHBaseServiceClearSlowLogResponsesArgs()
        err626 := containerStruct0.ReadField1(context.Background(), jsProt625)
        if err626 != nil {
            Usage()
            return
        }
        argvalue0 := containerStruct0.ServerNames
        value0 := argvalue0
        fmt.Print(client.ClearSlowLogResponses(context.Background(), value0))
        fmt.Print("\n")
        break
    case "getClusterId":
        if flag.NArg()-1 != 0 {
            fmt.Fprintln(os.Stderr, "GetClusterId requires 0 args")
            flag.Usage()
        }
        fmt.Print(client.GetClusterId(context.Background()))
        fmt.Print("\n")
        break
    case "":
        Usage()
        break
    default:
        fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
    }
}
